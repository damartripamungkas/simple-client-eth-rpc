var f=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var R=Object.prototype.hasOwnProperty;var j=(t,e)=>{for(var i in e)f(t,i,{get:e[i],enumerable:!0})},P=(t,e,i,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of x(e))!R.call(t,a)&&a!==i&&f(t,a,{get:()=>e[a],enumerable:!(r=C(e,a))||r.enumerable});return t};var F=t=>P(f({},"__esModule",{value:!0}),t);var k=(t,e,i)=>{if(!e.has(t))throw TypeError("Cannot "+i)};var n=(t,e,i)=>(k(t,e,"read from private field"),i?i.call(t):e.get(t)),o=(t,e,i)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,i)},_=(t,e,i,r)=>(k(t,e,"write to private field"),r?r.call(t,i):e.set(t,i),i);var H={};j(H,{Provider:()=>d,default:()=>S});module.exports=F(H);var s,g=class{constructor(t){o(this,s,void 0);this._overrideFormatReturn=(t,e)=>{let i={eth_chainId:this.eth_chainId};this[t]=(...r)=>n(this,s).call(this,t,r===void 0?[]:r,e)};this.eth_subscribe=(...t)=>n(this,s).call(this,"eth_subscribe",t,null);this.eth_unsubscribe=t=>n(this,s).call(this,"eth_unsubscribe",t,null);this.eth_blockNumber=()=>n(this,s).call(this,"eth_blockNumber",[],parseInt);this.eth_chainId=()=>n(this,s).call(this,"eth_chainId",[],parseInt);this.eth_call=(t,e)=>n(this,s).call(this,"eth_call",[t,e],null);this.eth_estimateGas=t=>n(this,s).call(this,"eth_estimateGas",[t],parseInt);this.eth_feeHistory=(t,e,i)=>n(this,s).call(this,"eth_feeHistory",[t,e,i],null);this.eth_gasPrice=()=>n(this,s).call(this,"eth_gasPrice",[],parseInt);this.eth_getBalance=(t,e)=>n(this,s).call(this,"eth_getBalance",[t,e],parseInt);this.eth_getBlockByHash=(t,e)=>n(this,s).call(this,"eth_getBlockByHash",[t,e],null);this.eth_getBlockByNumber=(t,e)=>n(this,s).call(this,"eth_getBlockByNumber",[t,e],null);this.eth_getBlockReceipts=t=>n(this,s).call(this,"eth_getBlockReceipts",[t],null);this.eth_getBlockTransactionCountByHash=t=>n(this,s).call(this,"eth_getBlockTransactionCountByHash",[t],parseInt);this.eth_getBlockTransactionCountByNumber=t=>n(this,s).call(this,"eth_getBlockTransactionCountByNumber",[t],parseInt);this.eth_getCode=(t,e)=>n(this,s).call(this,"eth_getCode",[t,e],null);this.eth_getFilterChanges=t=>n(this,s).call(this,"eth_getFilterChanges",[t],null);this.eth_getFilterLogs=t=>n(this,s).call(this,"eth_getFilterLogs",[t],null);this.eth_getLogs=t=>n(this,s).call(this,"eth_getLogs",[t],null);this.eth_getProof=(t,e,i)=>n(this,s).call(this,"eth_getProof",[t,e,i],null);this.eth_getStorageAt=(t,e,i)=>n(this,s).call(this,"eth_getStorageAt",[t,e,i],null);this.eth_getTransactionByBlockHashAndIndex=(t,e)=>n(this,s).call(this,"eth_getTransactionByBlockHashAndIndex",[t,e],null);this.eth_getTransactionByBlockNumberAndIndex=(t,e)=>n(this,s).call(this,"eth_getTransactionByBlockNumberAndIndex",[t,e],null);this.eth_getTransactionByHash=t=>n(this,s).call(this,"eth_getTransactionByHash",[t],null);this.eth_getTransactionCount=(t,e)=>n(this,s).call(this,"eth_getTransactionCount",[t,e],parseInt);this.eth_getTransactionReceipt=t=>n(this,s).call(this,"eth_getTransactionReceipt",[t],null);this.eth_getUncleCountByBlockHash=t=>n(this,s).call(this,"eth_getUncleCountByBlockHash",[t],parseInt);this.eth_getUncleCountByBlockNumber=t=>n(this,s).call(this,"eth_getUncleCountByBlockNumber",[t],parseInt);this.eth_hashrate=()=>n(this,s).call(this,"eth_hashrate",[],parseInt);this.eth_maxPriorityFeePerGas=()=>n(this,s).call(this,"eth_maxPriorityFeePerGas",[],parseInt);this.eth_mining=()=>n(this,s).call(this,"eth_mining",[],null);this.eth_newBlockFilter=()=>n(this,s).call(this,"eth_newBlockFilter",[],null);this.eth_newFilter=t=>n(this,s).call(this,"eth_newFilter",[t],null);this.eth_newPendingTransactionFilter=()=>n(this,s).call(this,"eth_newPendingTransactionFilter",[],null);this.eth_sendRawTransaction=t=>n(this,s).call(this,"eth_sendRawTransaction",[t],null);this.eth_syncing=()=>n(this,s).call(this,"eth_syncing",[],null);this.eth_uninstallFilter=t=>n(this,s).call(this,"eth_uninstallFilter",[t],null);this.net_listening=()=>n(this,s).call(this,"net_listening",[],null);this.net_peerCount=()=>n(this,s).call(this,"net_peerCount",[],parseInt);this.net_version=()=>n(this,s).call(this,"net_version",[],parseInt);this.qn_broadcastRawTransaction=t=>n(this,s).call(this,"qn_broadcastRawTransaction",[t],null);this.qn_getBlockWithReceipts=t=>n(this,s).call(this,"qn_getBlockWithReceipts",[t],null);this.qn_getReceipts=t=>n(this,s).call(this,"qn_getReceipts",[t],null);this.trace_block=t=>n(this,s).call(this,"trace_block",[t],null);this.trace_call=(t,e,i)=>n(this,s).call(this,"trace_call",[t,e,i],null);this.trace_callMany=(t,e)=>n(this,s).call(this,"trace_callMany",[t,e],null);this.trace_filter=t=>n(this,s).call(this,"trace_filter",[t],null);this.trace_replayBlockTransactions=(t,e)=>n(this,s).call(this,"trace_replayBlockTransactions",[t,e],null);this.trace_replayTransaction=(t,e)=>n(this,s).call(this,"trace_replayTransaction",[t,e],null);this.trace_transaction=t=>n(this,s).call(this,"trace_transaction",[t],null);this.txpool_content=()=>n(this,s).call(this,"txpool_content",[],null);this.txpool_inspect=()=>n(this,s).call(this,"txpool_inspect",[],null);this.txpool_status=()=>n(this,s).call(this,"txpool_status",[],null);this.web3_clientVersion=()=>n(this,s).call(this,"web3_clientVersion",[],null);this.web3_sha3=t=>n(this,s).call(this,"web3_sha3",[t],null);this.debug_getBadBlocks=()=>n(this,s).call(this,"debug_getBadBlocks",[],null);this.debug_storageRangeAt=(t,e,i,r,a)=>n(this,s).call(this,"debug_storageRangeAt",[t,e,i,r,a],null);this.debug_traceBlock=(t,e)=>n(this,s).call(this,"debug_traceBlock",[t,e],null);this.debug_traceBlockByHash=(t,e)=>n(this,s).call(this,"debug_traceBlockByHash",[t,e],null);this.debug_traceBlockByNumber=(t,e)=>n(this,s).call(this,"debug_traceBlockByNumber",[t,e],null);this.debug_traceCall=(t,e,i)=>n(this,s).call(this,"debug_traceCall",[t,e,i],null);this.debug_traceTransaction=(t,e)=>n(this,s).call(this,"debug_traceTransaction",[t,e],null);_(this,s,t)}};s=new WeakMap;var b=class{constructor(t,e){this.isReady=()=>!0;this.client={},this.client.on=()=>{},this.client.request=async i=>{let r=Object.assign({method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)},e);return await(await fetch(t,r)).json()}}};var w=require("web3-providers-ipc"),p=class{constructor(t,e,i){this.isReady=async()=>new Promise(t=>{this.client.once("connect",()=>t(!0))});this.client=new w.IpcProvider(t,e,i),this.client._getChainId=()=>new Promise(r=>r([])),this.client._getAccounts=()=>new Promise(r=>r([]))}};var N=require("web3-providers-ws"),m=class{constructor(t,e,i){this.isReady=async()=>new Promise(t=>{this.client.once("connect",()=>t(!0))});this.client=new N.WebSocketProvider(t,e,i),this.client._getChainId=()=>new Promise(r=>r([])),this.client._getAccounts=()=>new Promise(r=>r([]))}};var h,B,y,u,d=class{constructor(e,i,r,a){o(this,h,0);o(this,B,Number.MAX_SAFE_INTEGER-100);o(this,y,()=>(n(this,h)>=n(this,B)&&_(this,h,0),_(this,h,n(this,h)+1)));o(this,u,(e,i)=>{if(e.error!==void 0)throw e.error.message;return i==null?e.result:i(e.result)});this.isReady=async()=>await this.client.isReady();this.request=async e=>await this.client.client.request(e);this.subscribe=async(e,i,r)=>{let a=await this.send(e),l=c=>{c?.params?.subscription==a&&r(c.params.result,a)};this.client.client.on("message",l),i===!0&&this.client.client.on("connect",async()=>{a=await this.send(e)})};this.send=async e=>{let r={jsonrpc:"2.0",id:n(this,y).call(this),method:e.method,params:e.params},a=await this.client.client.request(r);return n(this,u).call(this,a,e.formatReturn)};this.sendBatch=async(...e)=>{let i=e.map(a=>(n(this,y).call(this),{jsonrpc:"2.0",id:n(this,h),method:a.method,params:a.params})),r=await this.client.client.request(i);return r[0]===void 0&&n(this,u).call(this,r,null),r.sort((a,l)=>a.id-l.id).map((a,l)=>n(this,u).call(this,a,e[l].formatReturn))};if(i=i??{},r=r??{},e.startsWith("http"))this.client=new b(e,i),this.subscribe=()=>{throw"network type http not support subscribe"};else if(e.startsWith("ws"))this.client=new m(e,i,r);else if(e.endsWith(".ipc"))this.client=new p(e,i,r);else throw"network type is not supported, only support http/ws/.ipc";let l=(...c)=>({method:c[0],params:c[1],formatReturn:c[2]});this.ethBuild=new g(l),this.ethSend=new g(async(...c)=>await this.send(l(...c))),a?.forEach(c=>{let{method:T,formatReturn:I}=c;this.ethBuild._overrideFormatReturn(T,I),this.ethSend._overrideFormatReturn(T,I)})}};h=new WeakMap,B=new WeakMap,y=new WeakMap,u=new WeakMap;var S={Provider:d};0&&(module.exports={Provider});
